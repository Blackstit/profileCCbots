import telebot
from telebot import types
import sqlite3 as sql
from datetime import datetime
import random
import string
import media

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
con = sql.connect("data.db", check_same_thread=False)
cur = con.cursor()
cur.execute('''CREATE TABLE IF NOT EXISTS users
             (id INTEGER PRIMARY KEY, username TEXT, first_name TEXT, last_name TEXT, registration_date TEXT, referrals INTEGER, referral_code TEXT, referrer_id INTEGER, reputation INTEGER DEFAULT 0)''')

cur.execute('''CREATE TABLE IF NOT EXISTS completed_tasks (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    task_name TEXT,
    UNIQUE(user_id, task_name)
);''')

# –í–∞—à –±–æ—Ç
token = "6536069812:AAGnGeg6oXtsvl7CcRZgb0PfV5CyhSb3pyI"
bot = telebot.TeleBot(token)

# ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
chan_id = -1001850988863

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞_inline = telebot.types.InlineKeyboardMarkup()
–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è = telebot.types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/agavacrypto")
–≤—Å—Ç—É–ø–∏—Ç—å_–≤_—á–∞—Ç = telebot.types.InlineKeyboardButton(text="–í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç", url="https://t.me/+TIBhBif_kQYxZjM0")
–ø—Ä–æ–≤–µ—Ä–∏—Ç—å = telebot.types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check")
–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞_inline.add(–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è)
–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞_inline.add(–≤—Å—Ç—É–ø–∏—Ç—å_–≤_—á–∞—Ç)
–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞_inline.add(–ø—Ä–æ–≤–µ—Ä–∏—Ç—å)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞_–ø—Ä–æ—Ñ–∏–ª—è = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
–∫–Ω–æ–ø–∫–∞_–ø—Ä–æ—Ñ–∏–ª—å = telebot.types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å üë§")
–∫–Ω–æ–ø–∫–∞_–æ_–Ω–∞—Å = telebot.types.KeyboardButton("–û –Ω–∞—Å üåê")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û –Ω–∞—Å"
–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞_–ø—Ä–æ—Ñ–∏–ª—è.row(–∫–Ω–æ–ø–∫–∞_–ø—Ä–æ—Ñ–∏–ª—å, –∫–Ω–æ–ø–∫–∞_–æ_–Ω–∞—Å)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
def generate_referral_code():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=10))

@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.chat.id
    username = message.chat.username
    first_name = message.chat.first_name
    last_name = message.chat.last_name
    registration_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ –∫–æ–º–∞–Ω–¥–µ "/start"
    referer_code = None
    parts = message.text.split()
    if len(parts) > 1:
        referer_code = parts[1]

    print(f"{username} - –†–µ—Ñ–µ—Ä—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {referer_code} –º–µ—Å—Å–∞–¥–∂: {message.text}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = cur.execute("SELECT * FROM users WHERE id = ?", (user_id,)).fetchone()
    print(f"{username} - –°—Ç–∞—Ä—Ç. —é–∑–µ—Ä –¥–∞—Ç–∞: {user_data}")
    if not user_data:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        referral_code = generate_referral_code()
        print(f"{username} - –°—Ç–∞—Ä—Ç. —Ä–µ—Ñ –∫–æ–¥ –≥–µ–Ω: {referral_code}")
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
        referrer_id = None
        if referral_code:
            referrer_data = cur.execute("SELECT id FROM users WHERE referral_code = ?", (referer_code,)).fetchone()
            if referrer_data:
                referrer_id = referrer_data[0]

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cur.execute("INSERT INTO users (id, username, first_name, last_name, registration_date, referrals, referral_code, referrer_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                    (user_id, username, first_name, last_name, registration_date, 0, referral_code, referrer_id))
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É user_stats
        cur.execute("INSERT INTO user_stats (user_id, username, message_count) VALUES (?, ?, 0)", (user_id, username))
        con.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è
        bot.send_message(user_id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä AGAVA CRYPTO!", reply_markup=–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞_–ø—Ä–æ—Ñ–∏–ª—è)
        bot.send_message(user_id, """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –∫–æ–º—å—é–Ω–∏—Ç–∏ –∫—Ä–∏–ø—Ç–æ-—ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤!

–ú—ã –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –≥–æ—Ç–æ–≤—ã—Ö –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å —Å–≤–æ–µ –≤—Ä–µ–º—è –∏ —ç–Ω–µ—Ä–≥–∏—é –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, —á—Ç–æ–±—ã –≤–º–µ—Å—Ç–µ —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ —É—Å–ø–µ—Ö—É!

–ü—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª –∏ —Å–æ–∑–¥–∞–π —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ —ç—Ç–æ–º –±–æ—Ç–µ.

–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –∏ –ø–æ–æ—â—Ä–µ–Ω–∏—è –æ—Ç AGAVA CRYPTO! –î–∞–≤–∞–π –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ —É—Å–ø–µ—Ö—É –≤–º–µ—Å—Ç–µ!""", reply_markup=–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞_inline)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(user_id, "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", reply_markup=–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞_–ø—Ä–æ—Ñ–∏–ª—è)



@bot.callback_query_handler(func=lambda call: call.data == "check")
def c_listener(call):
    user_id = call.message.chat.id
    x = bot.get_chat_member(chan_id, user_id)

    if x.status in ["member", "creator", "administrator"]:
        user_data = cur.execute("SELECT * FROM users WHERE id = ?", (user_id,)).fetchone()
        print(f"–ß–µ–∫, —é–∑–µ—Ä –¥–∞—Ç–∞: {user_data}")
        if user_data:
            # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ—Ñ–µ—Ä—Ä–µ—Ä–∞
            referrer_id = user_data[7]
            if referrer_id is not None:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                cur.execute("UPDATE users SET referrals = referrals + 1 WHERE id = ?", (referrer_id,))
                con.commit()
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É –æ –Ω–æ–≤–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–µ
                referrer_data = cur.execute("SELECT first_name, username, referrals FROM users WHERE id = ?", (referrer_id,)).fetchone()
                if referrer_data:
                    referrer_name = referrer_data[0]
                    referrer_username = referrer_data[1]
                    referrals_count = referrer_data[2]
                    message_text = f"""üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! {referrer_name} (@{referrer_username})

                    –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +10 $AGAVA!!!!
                    –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals_count}"""
                    bot.send_message(referrer_id, message_text)

                # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ 10 –æ—á–∫–æ–≤ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∑–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                cur.execute("UPDATE users SET reputation = reputation + 10 WHERE id = ?", (referrer_id,))
                con.commit()

        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
        bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id, text="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=None)
    else:
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.edit_message_text(chat_id=user_id, message_id=call.message.message_id, text="–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –Ω–∞ –Ω–∞—à —á–∞—Ç", reply_markup=–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞_inline)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û –Ω–∞—Å"
@bot.message_handler(func=lambda message: message.text == "–û –Ω–∞—Å üåê")
def about_us(message):
    # –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ
    about_text = ("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –∫–æ–º—å—é–Ω–∏—Ç–∏ –∫—Ä–∏–ø—Ç–æ-—ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤!\n\n"
                  "–ú—ã –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –≥–æ—Ç–æ–≤—ã—Ö –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å —Å–≤–æ–µ –≤—Ä–µ–º—è –∏ —ç–Ω–µ—Ä–≥–∏—é –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, —á—Ç–æ–±—ã –≤–º–µ—Å—Ç–µ —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ —É—Å–ø–µ—Ö—É!\n\n"
                  "–ü—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª –∏ —Å–æ–∑–¥–∞–π —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ —ç—Ç–æ–º –±–æ—Ç–µ.\n\n"
                  "–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –∏ –ø–æ–æ—â—Ä–µ–Ω–∏—è –æ—Ç AGAVA CRYPTO! –î–∞–≤–∞–π –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ —É—Å–ø–µ—Ö—É –≤–º–µ—Å—Ç–µ!")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
    keyboard = types.InlineKeyboardMarkup()
    btn_agava_crypto = types.InlineKeyboardButton("AGAVA CRYPTO", url="https://t.me/agavacrypto")
    btn_agava_crypto_chat = types.InlineKeyboardButton("AGAVA CRYPTO CHAT", url="https://t.me/agavacryptochat")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard.row(btn_agava_crypto)
    keyboard.row(btn_agava_crypto_chat)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
    bot.send_message(message.chat.id, about_text, reply_markup=keyboard)

from telebot import types

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Ñ–∏–ª—å üë§")
def profile(message):
    user_id = message.chat.id
    user_data = cur.execute("SELECT * FROM users WHERE id = ?", (user_id,)).fetchone()

    if user_data:
        referrals_count = user_data[5]
        referral_code = user_data[6]
        username = user_data[1] if user_data[1] else "–ù–µ—Ç"
        first_name = user_data[2] if user_data[2] else "–ù–µ—Ç"
        last_name = user_data[3] if user_data[3] else "–ù–µ—Ç"
        registration_date = user_data[4]
        referrer_id = user_data[7]
        reputation = user_data[8]

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        registration_date = user_data[4]
        registration_datetime = datetime.strptime(registration_date, "%Y-%m-%d %H:%M:%S")

        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –¥–∞—Ç–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        days_since_registration = (datetime.now() - registration_datetime).days


        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        referrer_info = ""
        if referrer_id:
            referrer_data = cur.execute("SELECT first_name, username FROM users WHERE id = ?", (referrer_id,)).fetchone()
            if referrer_data:
                referrer_name = referrer_data[0]
                referrer_username = referrer_data[1]
                referrer_info = f"–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: {referrer_name} (@{referrer_username})\n"

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_stats
        message_count = cur.execute("SELECT message_count FROM user_stats WHERE user_id = ?", (user_id,)).fetchone()
        message_count = message_count[0] if message_count else 0

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_stats
        last_activity_date = cur.execute("SELECT last_message_date FROM user_stats WHERE user_id = ? ORDER BY last_message_date DESC LIMIT 1", (user_id,)).fetchone()
        last_activity_date = last_activity_date[0] if last_activity_date else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        profile_message = f"–ò–º—è: {first_name}\n–§–∞–º–∏–ª–∏—è: {last_name}\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username}\n–î–Ω–µ–π –≤ –±–æ—Ç–µ: {days_since_registration}\n–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity_date}\n–†–µ—Ñ–µ—Ä—Ä–∞–ª—ã: {referrals_count}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n$AGAVA: {reputation}\n\n{referrer_info}–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: t.me/Cyndycate_invaterbot?start={referral_code}"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
        tasks_keyboard = types.InlineKeyboardMarkup(row_width=1)
        task_button = types.InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏—è üéØ ", callback_data="profile_tasks")
        tasks_keyboard.add(task_button)

        bot.send_photo(user_id, media.profile_img, caption=profile_message, reply_markup=tasks_keyboard)
    else:
        bot.send_message(user_id, "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")




@bot.callback_query_handler(func=lambda call: call.data == "profile_tasks")
def profile_tasks_handler(call):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
    tasks_keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
    button_10_messages = types.InlineKeyboardButton("10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ", callback_data="check_10_messages")
    tasks_keyboard.add(button_10_messages)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
    button_30_messages = types.InlineKeyboardButton("30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ", callback_data="check_30_messages")
    tasks_keyboard.add(button_30_messages)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    button_5_referrals = types.InlineKeyboardButton("5 —Ä–µ—Ñ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="check_5_referrals")
    tasks_keyboard.add(button_5_referrals)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    button_close = types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data="close")
    tasks_keyboard.add(button_close)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(call.message.chat.id, "–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π $AGAVA", reply_markup=tasks_keyboard)


def add_completed_task(user_id, task_name):
    cur.execute("INSERT OR IGNORE INTO completed_tasks (user_id, task_name) VALUES (?, ?)", (user_id, task_name))
    con.commit()

def check_task_completed(user_id, task_name):
    cur.execute("SELECT * FROM completed_tasks WHERE user_id = ? AND task_name = ?", (user_id, task_name))
    return cur.fetchone() is not None



@bot.callback_query_handler(func=lambda call: call.data == "check_10_messages")
def check_10_messages_handler(call):
    user_id = call.from_user.id
    message_count = cur.execute("SELECT message_count FROM user_stats WHERE user_id = ?", (user_id,)).fetchone()[0]

    if message_count >= 10 and not check_task_completed(user_id, "check_10_messages"):
        cur.execute("UPDATE users SET reputation = reputation + 50 WHERE id = ?", (user_id,))
        con.commit()
        add_completed_task(user_id, "check_10_messages")  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
        bot.answer_callback_query(call.id, text="–í—ã –ø–æ–ª—É—á–∏–ª–∏ +50 –æ—á–∫–æ–≤ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏", show_alert=True)
    elif check_task_completed(user_id, "check_10_messages"):
        bot.answer_callback_query(call.id, text="–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", show_alert=True)
    else:
        bot.answer_callback_query(call.id, text="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ")

@bot.callback_query_handler(func=lambda call: call.data == "check_30_messages")
def check_30_messages_handler(call):
    user_id = call.from_user.id
    message_count = cur.execute("SELECT message_count FROM user_stats WHERE user_id = ?", (user_id,)).fetchone()[0]

    if message_count >= 30 and not check_task_completed(user_id, "check_30_messages"):
        cur.execute("UPDATE users SET reputation = reputation + 200 WHERE id = ?", (user_id,))
        con.commit()
        add_completed_task(user_id, "check_30_messages")  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
        bot.answer_callback_query(call.id, text="–í—ã –ø–æ–ª—É—á–∏–ª–∏ +200 –æ—á–∫–æ–≤ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏", show_alert=True)
    elif check_task_completed(user_id, "check_30_messages"):
        bot.answer_callback_query(call.id, text="–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", show_alert=True)
    else:
        bot.answer_callback_query(call.id, text="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ")

@bot.callback_query_handler(func=lambda call: call.data == "check_5_referrals")
def check_5_referrals_handler(call):
    user_id = call.from_user.id
    referrals_count = cur.execute("SELECT referrals FROM users WHERE id = ?", (user_id,)).fetchone()[0]

    if referrals_count >= 5 and not check_task_completed(user_id, "check_5_referrals"):
        cur.execute("UPDATE users SET reputation = reputation + 200 WHERE id = ?", (user_id,))
        con.commit()
        add_completed_task(user_id, "check_5_referrals")  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
        bot.answer_callback_query(call.id, text="–í—ã –ø–æ–ª—É—á–∏–ª–∏ +200 –æ—á–∫–æ–≤ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏", show_alert=True)
    elif check_task_completed(user_id, "check_5_referrals"):
        bot.answer_callback_query(call.id, text="–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", show_alert=True)
    else:
        bot.answer_callback_query(call.id, text="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä—Ä–∞–ª–æ–≤")

@bot.callback_query_handler(func=lambda call: call.data == "close")
def close_handler(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)




if __name__ == "__main__":
    bot.polling()
